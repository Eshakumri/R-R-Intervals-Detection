#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <cmath>

// Parameters
const int SAMPLING_RATE = 500;          // Hz
const float PEAK_HEIGHT_RATIO = 0.9f;   // 90% of max value
const int REFRACTORY_MS = 250;          // ms
const int REFRACTORY_SAMPLES = (SAMPLING_RATE * REFRACTORY_MS) / 1000;

// Read ECG data from file
std::vector<float> read_ecg_data(const std::string& filename) {
    std::ifstream file(filename);
    std::string line;
    std::vector<float> data;

    if (!file) {
        std::cerr << "Error: Could not open file " << filename << "\n";
        return data;
    }

    while (std::getline(file, line)) {
        float value;
        std::stringstream ss(line);
        if (ss >> value) {
            data.push_back(value);
        }
    }
    return data;
}

// Detect R-peaks using threshold and refractory period
std::vector<int> detect_r_peaks(const std::vector<float>& signal) {
    std::vector<int> peaks;
    if (signal.empty()) return peaks;

    float max_val = *std::max_element(signal.begin(), signal.end());
    float threshold = PEAK_HEIGHT_RATIO * max_val;

    int last_peak = -REFRACTORY_SAMPLES;

    for (size_t i = 1; i < signal.size() - 1; ++i) {
        if (signal[i] > threshold &&
            signal[i] > signal[i - 1] &&
            signal[i] > signal[i + 1] &&
            static_cast<int>(i) - last_peak >= REFRACTORY_SAMPLES) {
            peaks.push_back(i);
            last_peak = i;
        }
    }

    return peaks;
}

// Compute and display the total number of R-peaks, average distance between them, and the heart rate (BPM) with diagnosis
void compute_r_peaks_summary(const std::vector<int>& r_peaks) {
    if (r_peaks.size() < 2) {
        std::cout << "Not enough R-peaks detected.\n";
        return;
    }

    // Total number of R-peaks
    int total_r_peaks = r_peaks.size();

    // Calculate the average sample distance between consecutive R-peaks
    int total_distance = 0;
    for (size_t i = 1; i < r_peaks.size(); ++i) {
        total_distance += (r_peaks[i] - r_peaks[i - 1]);
    }
    float avg_sample_distance = static_cast<float>(total_distance) / (r_peaks.size() - 1);

    // Calculate average RR interval in seconds and heart rate (BPM)
    float total_rr_interval = 0.0f;
    for (size_t i = 1; i < r_peaks.size(); ++i) {
        float rr_interval = (r_peaks[i] - r_peaks[i - 1]) / static_cast<float>(SAMPLING_RATE);
        total_rr_interval += rr_interval;
    }
    float avg_rr_interval = total_rr_interval / (r_peaks.size() - 1);
    float bpm = 60.0f / avg_rr_interval;

    // Diagnosis based on average BPM
    std::string diagnosis;
    if (bpm < 60)
        diagnosis = "Bradycardia (Slow heart rate)";
    else if (bpm > 100)
        diagnosis = "Tachycardia (Fast heart rate)";
    else
        diagnosis = "Normal Sinus Rhythm";

    // Display results
    std::cout << "\n--- R-Peaks Summary ---\n";
    std::cout << "Total R-peaks: " << total_r_peaks << "\n";
    std::cout << "Average distance between R-peaks: " << avg_sample_distance << " samples\n";
    std::cout << "Average Heart Rate: " << bpm << " BPM\n";
    std::cout << "Diagnosis: " << diagnosis << "\n";
}

int main() {
    std::string filename;
    std::cout << "Enter ECG data file path (e.g., Data/1L1.DAT): ";
    std::cin >> filename;

    auto data = read_ecg_data(filename);
    if (data.empty()) {
        std::cout << "No data read. Exiting.\n";
        return 1;
    }

    auto r_peaks = detect_r_peaks(data);
    compute_r_peaks_summary(r_peaks);

    return 0;
}
